(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{505:function(t,s,a){"use strict";a.r(s);var n=a(5),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[t._v('###   众所周知,java或者python和一些其它语言中,官方的输入函数一般都支持读取一整行输入,例如Scanner的Nextline(),可以直接读取一整行字符串,如 "asdasd??asdasd?asdasd" ,而Go的官方包fmt却是与C语言的scanf设计类似,以空格或者回车来判断输入是否完成,所以就导致了输入: "asd??asd?asd" 只获取到了"asd",剩下的全在缓冲区,私认为这个设计很屎,虽然到后期需要用到输入的情况很少很少\n'),a("h3",{attrs:{id:"想要获得在其它语言上的体验-我们得改造一下官方的包-其实无非就是在流上操作-而官方针对不同的平台以及安全上做了很多操作-我们自己编写的函数只需要输入流完整的获取全部输入二进制-再将他直接转成string类型-其它语言也是这么操作的-但是go官方确没有这个实现-我们自己实现的函数性能上肯定比官方强上不少-毕竟没做各种安全检查-但是能基本满足我的需求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#想要获得在其它语言上的体验-我们得改造一下官方的包-其实无非就是在流上操作-而官方针对不同的平台以及安全上做了很多操作-我们自己编写的函数只需要输入流完整的获取全部输入二进制-再将他直接转成string类型-其它语言也是这么操作的-但是go官方确没有这个实现-我们自己实现的函数性能上肯定比官方强上不少-毕竟没做各种安全检查-但是能基本满足我的需求"}},[t._v("#")]),t._v(" ?  想要获得在其它语言上的体验,我们得改造一下官方的包,其实无非就是在流上操作,而官方针对不同的平台以及安全上做了很多操作,我们自己编写的函数只需要输入流完整的获取全部输入二进制,再将他直接转成String类型,其它语言也是这么操作的,但是Go官方确没有这个实现,我们自己实现的函数性能上肯定比官方强上不少,毕竟没做各种安全检查,但是能基本满足我的需求")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这是官方fmt.scanln实现代码,以换行或者空格来判断输入是否完成")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s?"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ss"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doScan")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("numProcessed?"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("?err?"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n????"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("defer")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("errorHandler")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n????"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("?arg?"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("range")]),t._v("?a?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n????????s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("scanOne")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'v'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("?arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n????????numProcessed"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n????"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n????"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v("?s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nlIsEnd?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n????????"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n????????????r?"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("?s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRune")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n????????????"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v("?r?"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("?r?"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("?eof?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n????????????????"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n????????????"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n????????????"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSpace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n????????????????s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("errorString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"expected?newline"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n????????????????"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n????????????"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n????????"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n????"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n????"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("我们简单改造的")]),t._v(" "),a("div",{staticClass:"language-go extra-class"},[a("pre",{pre:!0,attrs:{class:"language-go"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Scanf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a?"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n????"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//打开系统的输入流")]),t._v("\n????reader?"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("?bufio"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewReader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("os"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Stdin"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n????"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//读取一整行二进制数据")]),t._v("\n????data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("_")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v("?reader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ReadLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n????"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//转化为字符串")]),t._v("\n????"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a?"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("?"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"这样我们就可以直接调用scanf-strs-函数对strs进行输入了"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#这样我们就可以直接调用scanf-strs-函数对strs进行输入了"}},[t._v("#")]),t._v(" ?这样我们就可以直接调用scanf(&strs)函数对strs进行输入了")])])}),[],!1,null,null,null);s.default=r.exports}}]);