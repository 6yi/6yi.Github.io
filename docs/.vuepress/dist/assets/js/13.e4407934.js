(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{504:function(t,a,s){"use strict";s.r(a);var e=s(5),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[t._v("> Json Web Token简称**JWT**,这是一种后端的令牌验证方式\n"),s("h3",{attrs:{id:"传统混合开发中的验证方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传统混合开发中的验证方式"}},[t._v("#")]),t._v(" 传统混合开发中的验证方式")]),t._v(" "),s("p",[t._v("?\t\t传统混合开发的验证一般是用session和cookie来实现,用户登陆,信息保存在seesion中,浏览器保存一个cookie,调用服务的时候根据cookie获取session就可以进行验证了")]),t._v(" "),s("p",[t._v("?\t    而前后端分离之后 ,在安卓和IOS跨域会导致session不一致的问题 , 所以后端不再使用seesion,而是使用token方式进行验证,先由前端登陆,生成token,保存到缓存中,并且发送会前端,前端每次调用服务必须带着token到后端进行验证,验证成功则放行.")]),t._v(" "),s("h4",{attrs:{id:"流程示意图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#流程示意图"}},[t._v("#")]),t._v(" 流程示意图:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/lzhengycy/Pic/raw/master/img/20200511001018.jpg",alt:"未命名文件"}})]),t._v(" "),s("h4",{attrs:{id:""}},[s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("h3",{attrs:{id:"jwt验证"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jwt验证"}},[t._v("#")]),t._v(" JWT验证")]),t._v(" "),s("p",[t._v("?\t\t引用官方来重新介绍一些jwt")]),t._v(" "),s("blockquote",[s("p",[t._v("JSON Web Token（JWT）是一个开放的标准（RFC 7519），它定义了一个紧凑且自包含的方式，用于在各方之间以JSON对象安全地传输信息。这些信息可以通过数字签名进行验证和信任。可以使用秘密（使用HMAC算法）或使用RSA的公钥/私钥对来对JWT进行签名。")])]),t._v(" "),s("p",[t._v("?")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/lzhengycy/Pic/raw/master/img/20200511011029.png",alt:"image-20200511011028489"}})]),t._v(" "),s("p",[t._v("jwt验证有以下几个操作:")]),t._v(" "),s("blockquote",[s("p",[t._v("用户使用账号和面发出post请求；")]),t._v(" "),s("p",[t._v("服务器使用私钥创建一个jwt；")]),t._v(" "),s("p",[t._v("服务器返回这个jwt给浏览器；")]),t._v(" "),s("p",[t._v("浏览器将该jwt串在请求头中像服务器发送请求；")]),t._v(" "),s("p",[t._v("服务器验证该jwt；")]),t._v(" "),s("p",[t._v("返回响应的资源给浏览器。")])]),t._v(" "),s("h3",{attrs:{id:"jwt的组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jwt的组成"}},[t._v("#")]),t._v(" Jwt的组成")]),t._v(" "),s("blockquote",[s("p",[t._v("头部（header）、载荷（payload）、签证（signature）")])]),t._v(" "),s("p",[t._v("头部（header）")]),t._v(" "),s("p",[t._v("?\t\t头部有两个信息,一个是加密算法类型,还有声明它是jwt")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"typ"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"JWT"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"alg"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HS256"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("头部经由base64加密,会变成类似:eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9")]),t._v(" "),s("h3",{attrs:{id:"载荷-payload"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#载荷-payload"}},[t._v("#")]),t._v(" 载荷（payload）")]),t._v(" "),s("p",[t._v("该部分一般存放一些有效的信息和状态信息。jwt的标准定义包含五个字段：")]),t._v(" "),s("blockquote",[s("ul",[s("li",[s("code",[t._v("iss")]),t._v("：该JWT的签发者")]),t._v(" "),s("li",[s("code",[t._v("sub")]),t._v(": 该JWT所面向的用户")]),t._v(" "),s("li",[s("code",[t._v("aud")]),t._v(": 接收该JWT的一方")]),t._v(" "),s("li",[s("code",[t._v("exp(expires)")]),t._v(": 什么时候过期，这时间戳")]),t._v(" "),s("li",[s("code",[t._v("iat(issued at)")]),t._v(": 在什么时候签发的")])])]),t._v(" "),s("p",[t._v("上面的五个字段不是必须的,除此之外还可以定义自己需要的状态信息,比如用户名等")]),t._v(" "),s("p",[t._v("这部分也是由base64加密,")]),t._v(" "),s("h3",{attrs:{id:"签证-signature"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#签证-signature"}},[t._v("#")]),t._v(" 签证（signature）")]),t._v(" "),s("p",[t._v("该部分是使用header (base64后的)+payload (base64后的)+加盐值+HS256加密后的数据")]),t._v(" "),s("p",[t._v("简单的说这部分就是由前面两个部分的base64值经过 加盐 HS256加密后形成的,加盐值当然不会让其它人知道,如果其他人得知了,那就可以自我签发jwt了,加密就没卵用了")]),t._v(" "),s("h3",{attrs:{id:"验证过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#验证过程"}},[t._v("#")]),t._v(" 验证过程")]),t._v(" "),s("p",[t._v("后端获取到jwt数据是类似这种  xxxx.xxx.xxx三段格式的,我们需要做的是将第一段和第二段的数据用盐加密,再于第三段的签证对比")]),t._v(" "),s("p",[t._v("如果一样则表示数据没有被修改过,我们直接用base64解密第二段,获取里面的参数")]),t._v(" "),s("p",[t._v("如果不一样,则表示数据被改动过,直接返回错值")]),t._v(" "),s("h3",{attrs:{id:"下面是一个springboot-jwt的整合demo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#下面是一个springboot-jwt的整合demo"}},[t._v("#")]),t._v(" 下面是一个springBoot+JWT的整合Demo")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/6yi/SpringJWTDemo"}},[t._v("SpringBoot+JWT的简单Demo")])])])}),[],!1,null,null,null);a.default=r.exports}}]);